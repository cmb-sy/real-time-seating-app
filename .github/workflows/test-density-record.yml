name: Test Density Recording

on:
  workflow_dispatch:

jobs:
  test-density-record:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq and bc
        run: sudo apt-get update && sudo apt-get install -y jq bc

      - name: Test density recording
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "🧪 密度記録機能のテストを開始..."

          # シークレットの存在確認
          if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
            echo "❌ エラー: Supabase認証情報が設定されていません"
            exit 1
          fi

          echo "✅ Supabase認証情報が設定されています"
          echo "URL: ${SUPABASE_URL}"

          # 座席データの取得テスト
          echo "📊 座席データを取得中..."
          SEATS_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X GET \
            "${SUPABASE_URL}/rest/v1/seats?select=*" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}")

          HTTP_CODE=$(echo "$SEATS_RESPONSE" | grep "HTTP_CODE" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$SEATS_RESPONSE" | sed '/HTTP_CODE/d')

          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ 座席データ取得成功"
            echo "データ: $RESPONSE_BODY"
          else
            echo "❌ 座席データ取得失敗"
            echo "HTTP Status: $HTTP_CODE"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi

          # 密度計算
          OCCUPIED_COUNT=$(echo "$RESPONSE_BODY" | jq '[.[] | select(.is_occupied == true)] | length')
          # 総座席数は8席固定
          TOTAL_SEATS=8
          DENSITY_RATE=$(echo "scale=2; $OCCUPIED_COUNT * 100 / $TOTAL_SEATS" | bc)

          echo "占有座席数: $OCCUPIED_COUNT / $TOTAL_SEATS"
          echo "密度率: $DENSITY_RATE%"

          # settings テーブル更新テスト
          echo "⚙️ 設定テーブルを更新中..."
          SETTINGS_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X PATCH \
            "${SUPABASE_URL}/rest/v1/settings?key=eq.density" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -d "{\"value\": $DENSITY_RATE}")

          HTTP_CODE=$(echo "$SETTINGS_RESPONSE" | grep "HTTP_CODE" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$SETTINGS_RESPONSE" | sed '/HTTP_CODE/d')

          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "204" ]; then
            echo "✅ 設定テーブル更新成功"
          else
            echo "❌ 設定テーブル更新失敗"
            echo "HTTP Status: $HTTP_CODE"
            echo "Response: $RESPONSE_BODY"
          fi

          # density_history テーブル挿入テスト
          echo "📈 密度履歴テーブルに記録中..."
          DAY_OF_WEEK=$(date +%w)
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          HISTORY_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "${SUPABASE_URL}/rest/v1/density_history" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -d "{
              \"day_of_week\": $DAY_OF_WEEK,
              \"density_rate\": $DENSITY_RATE,
              \"occupied_seats\": $OCCUPIED_COUNT,
              \"created_at\": \"$TIMESTAMP\"
            }")

          HTTP_CODE=$(echo "$HISTORY_RESPONSE" | grep "HTTP_CODE" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$HISTORY_RESPONSE" | sed '/HTTP_CODE/d')

          if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "200" ]; then
            echo "✅ 密度履歴記録成功"
            echo "記録データ: $RESPONSE_BODY"
          else
            echo "❌ 密度履歴記録失敗"
            echo "HTTP Status: $HTTP_CODE"
            echo "Response: $RESPONSE_BODY"
            
            # エラーの詳細を調査
            echo "🔍 エラー詳細調査..."
            
            # テーブル構造を確認
            TABLE_INFO=$(curl -s -X GET \
              "${SUPABASE_URL}/rest/v1/density_history?limit=1" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}")
            echo "テーブル情報: $TABLE_INFO"
          fi

          echo "🎯 テスト完了"
